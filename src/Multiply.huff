
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

#define macro MULTIPLY() = takes(0) returns(0) {
    
    0x04 calldataload         // [arg_1]
    dup1 iszero zero jumpi    // if arg_1 == 0, return 0

    0x24 calldataload swap1   // [arg_1, arg_2]
    dup2 dup2 mul             // [mul_result, arg_1, arg_2]
    dup1 0x00 mstore          // [mul_result, arg_1, arg_2] store mul_result in memory at offset 0

    div eq ret jumpi          // if mul_result / arg_2 == arg_1, return mul_result

    0x00 0x00 revert

    zero:
        0x00 0x00 mstore
        0x20 0x00 return
    ret:
        0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xe0 shr  //  [func_sig]

    dup1 __FUNC_SIG(multiply) eq multiply jumpi

    0x00 0x00 revert

    multiply:
       MULTIPLY()

}