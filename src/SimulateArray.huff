
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can; 
 *      - Push numbers onto a array, 
 *      - Pop the last index from the array,
 *      - View what's stored at an index, 
 *      - Gets the length of the array, 
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert. 
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

#define macro MAIN() = takes(0) returns(0) {
    returndatasize calldataload 0xe0 shr // [func_sig]
    
    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi

    0x00 0x00 revert

    pushh:
        PUSHH()
    popp:
        POPP()
    read:
        READ()
    length:
        LENGTH()
    write:
        WRITE()
}

#define macro LENGTH() = takes(0) returns(0) {
    returndatasize sload // [length] We always store length at slot zero.
    returndatasize mstore
    0x20 returndatasize return
}

#define macro READ() = takes(0) returns(0) {
    returndatasize sload // [length] We always store length at slot zero.
    0x04 calldataload // [index, length]

    dup1 swap2 gt continue jumpi // [index] if length > index, continue

    // Revert if index out of bounds.
    __ERROR(OutOfBounds) returndatasize mstore
    0x20 returndatasize revert

    continue:
        0x20 mul // [index * 32] i.e. factor
        0x20 add // [32 + index * 32] offset + factor; is always 0x20
        sload // [array[index]]

        returndatasize mstore
        0x20 returndatasize return
}

#define macro WRITE() = takes(0) returns(0) {
    returndatasize sload // [length] We always store length at slot zero.
    0x04 calldataload // [index, length]

    dup1 swap2 gt continue jumpi // [index] if length > index, continue

    // Revert if index out of bounds.
    __ERROR(OutOfBounds) returndatasize mstore
    0x20 returndatasize revert

    continue:
        0x20 mul // [index * 32] i.e. factor
        0x20 add // [32 + index * 32] = [offset + factor] = [slot]; is always 0x20
        0x24 calldataload swap1 // [slot, num]
        sstore // []

        returndatasize returndatasize return
}

#define macro PUSHH() = takes(0) returns(0) {
    returndatasize sload // [length] We always store length at slot zero.
    dup1 0x1 add // [new_length, new_index]
    returndatasize sstore // [new_index] Store new length
    0x20 mul 0x20 add // [slot]

    0x04 calldataload swap1 // [slot, num]
    sstore // [] Store new num at slot for new_index

    0x00 0x00 return
}

#define macro POPP() = takes(0) returns(0) {
    returndatasize sload // [length] We always store length at slot zero.

    dup1 iszero rev jumpi // [length] revert if array is empty

    0x01 swap1 sub // [new_length, index_to_pop]
    returndatasize sstore // [index_to_pop] store new length

    returndatasize returndatasize return

    rev:
        __ERROR(ZeroArray) returndatasize mstore
        0x20 returndatasize revert
}